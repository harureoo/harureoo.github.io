<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>gongfangshijie</title>
      <link href="/2024/10/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb/"/>
      <url>/2024/10/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CWeb/</url>
      
        <content type="html"><![CDATA[<p>还没做过攻防世界的题 做一下</p><h1 id="1、Training-WWW-Robots"><a href="#1、Training-WWW-Robots" class="headerlink" title="1、Training-WWW-Robots"></a>1、Training-WWW-Robots</h1><p>robots想到robots协议 查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/robots.txt</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /fl0g.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User-agent: Yandex</span><br><span class="line">Disallow: *</span><br></pre></td></tr></table></figure><p>访问即可</p><h1 id="2、PHP2"><a href="#2、PHP2" class="headerlink" title="2、PHP2"></a>2、PHP2</h1><p>打开网页后发现一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>通过phps查看网页源码（我还是第一次知道这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:62789/index.phps</span><br></pre></td></tr></table></figure><p>得到网站源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>发现url解码后能够得到admin即可</p><p>解析时会自动解码一次，因此要编码两次。</p><h1 id="3、unserialize3"><a href="#3、unserialize3" class="headerlink" title="3、unserialize3"></a>3、unserialize3</h1><p>根据题目名字判断应该是反序列化的题目 打开网页后看到部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure><p>看到__wakeup()基本上可以确定是反序列化了，?code&#x3D;应该是提示传入参数的。我们把代码补全后php运行，即可得到序列化编码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到序列化编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure><p>这时候只要跳过wakeup函数就可以避免返回bad requests了</p><p>修改变量个数，使其大于实际变量个数即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;xctf&quot;:3:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure><h1 id="4、ics-06"><a href="#4、ics-06" class="headerlink" title="4、ics-06"></a>4、ics-06</h1><p>点开后是一个工控云管理系统，当然只是个空壳子。随便点点，发现报表中心可以点开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:51353/index.php?id=1</span><br></pre></td></tr></table></figure><p>附加一个提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">送分题</span><br></pre></td></tr></table></figure><p>?id&#x3D;1这个太熟悉了 不过肯定不是sql注入 应该是爆破这种的 burp抓包弄进intruder爆破就行了<br>当爆破到2333的时候跑出了结果</p><h1 id="5、view-source"><a href="#5、view-source" class="headerlink" title="5、view_source"></a>5、view_source</h1><p>一眼</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rc4</title>
      <link href="/2024/10/01/rc4/"/>
      <url>/2024/10/01/rc4/</url>
      
        <content type="html"><![CDATA[<p>最近在写wpe和wpa的论文，正好看到rc4算法，学习一下。</p><p><a href="https://www.youtube.com/watch?v=kfdvlaOD1ig&t=211s">推荐视频</a></p><p>rc4，即Rivest Cipher 4 , 流加密算法。</p><p>其分为两步：KSA 与 PRGA</p><h1 id="1、KSA"><a href="#1、KSA" class="headerlink" title="1、KSA"></a>1、KSA</h1><p>即The key-scheduling algorithm  ， “初始化算法”。</p><p>这一步是要用Key生成S盒密钥流</p><p>其过程如下</p><p>首先S盒起始设置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,1,2,...,255</span><br></pre></td></tr></table></figure><p>一共是256个</p><p>假设我们的密钥是MDY</p><p>其ASCII值分别对应（十进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">77,68,89</span><br></pre></td></tr></table></figure><p>因此我们将密钥向量设置为 255是3的倍数 因此256一定是77</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">77,68,89,77,68,89,...,77</span><br></pre></td></tr></table></figure><p>之后便可以开始进行操作</p><p>对S盒向量组，第i个，将它的序号与前一位的值相加，再加上密钥向量该位的值，模256后得到一个新的序号j，将第i个与第j+1个交换。第0位的前一位认为是0，或者认为第0位没有前一位。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; Key-Scheduling Algorithm (KSA) &quot;&quot;&quot;</span>  </span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  </span><br><span class="line">    j = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):  </span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span>  </span><br><span class="line">        S[i], S[j] = S[j], S[i]  </span><br><span class="line">    <span class="built_in">print</span>(S)  </span><br><span class="line">    <span class="keyword">return</span> S</span><br></pre></td></tr></table></figure><p>在这个例子中，首先，序号为0；第0位，则没有前一位；本位为K，十进制的ASCII值为77。因此我们将0+0+77&#x3D;77，77模256仍然是77，77+1&#x3D;78，因此将第0位与第78位交换。</p><p>现在我们得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">77,1,2,3,...,76,0,78,...,255</span><br></pre></td></tr></table></figure><p>对下一位，同理。序号为1，在S盒中前一位为77，在密钥向量中该位为68，相加1+77+68&#x3D;146，146模255&#x3D;146，146+1&#x3D;147，因此将S盒的第1位与第147位交换。现在我们得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">77,146,2,3,...,76,0,78,...,145,1,147,...,255</span><br></pre></td></tr></table></figure><p>接着重复直到255即可，那么在第255位会发生什么呢？</p><p>假设S盒序号为255的前一位为m，那么在第255位有：序号为255，在S盒中前一位为m，在密钥向量中该位为77。77+m+255模255，即77+m模255，最后再交换即可。</p><h1 id="2、PRGA"><a href="#2、PRGA" class="headerlink" title="2、PRGA"></a>2、PRGA</h1><p>即The pseudo-random generation algorithm ， “伪随机子密码生成算法”。</p><p>假设我们的明文是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caidenglang</span><br></pre></td></tr></table></figure><p>对应的ASCII，十进制为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99,97,105,100,101,110,103,108,97,110,103</span><br></pre></td></tr></table></figure><p>对S盒第i位，交换它的下一位和第j位。第j位的计算规则：起始j&#x3D;0，j等于j+第i位的下一位然后模256。然后输出序号为r的值，r&#x3D;这两位之和模256的值。当输出的长度等于明文长度后即可停止。</p><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; Pseudo-Random Generation Algorithm (PRGA) &quot;&quot;&quot;</span>  </span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>  </span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span>  </span><br><span class="line">        S[i], S[j] = S[j], S[i]  </span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]  </span><br><span class="line">        <span class="keyword">yield</span> K</span><br></pre></td></tr></table></figure><p>在本例中，S盒为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">121,45,84,61,133,85,95,...</span><br></pre></td></tr></table></figure><p>对第i位，下一位为第1位，为45，j&#x3D;j+45&#x3D;45，模256后依然是45，交换s[i]和s[j]后，r&#x3D;45+146&#x3D;191<br>因此k的第一个值应当是S盒序号191的值，为28。</p><p>重复此过程，得到K盒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28,70,35,137,132,31,85,103,70,50</span><br></pre></td></tr></table></figure><p>最后一步将明文和K盒逐位异或即可。</p><p>明文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99,97,105,100,101,110,103,108,97,110,103</span><br></pre></td></tr></table></figure><p>K盒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28,70,35,137,132,31,85,103,70,50</span><br></pre></td></tr></table></figure><p>异或操作：首先将十进制转换为二进制，99(decimal)&#x3D;64+32+2+1&#x3D;1100011(binary),28&#x3D;16+8+4&#x3D;11100。</p><p>将他们向左对齐后竖着写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1100011</span><br><span class="line">0011100</span><br></pre></td></tr></table></figure><p>异或即是检查是否相异，即是不是不一样，不一样就是真，输出1，反之输出0。</p><p>最后的结果应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1111111</span><br></pre></td></tr></table></figure><p>转换为二进制，因为一共有7位，故2^7-1&#x3D;127（简单的等比数列求和），因此第一位的十进制ASCII值应当为127。</p><p>重复即可得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[127, 39, 74, 237, 225, 113, 50, 11, 39, 92, 255]</span><br></pre></td></tr></table></figure><h1 id="3、python代码示例"><a href="#3、python代码示例" class="headerlink" title="3、python代码示例"></a>3、python代码示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; Key-Scheduling Algorithm (KSA) &quot;&quot;&quot;</span>  </span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  </span><br><span class="line">    j = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):  </span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span>  </span><br><span class="line">        S[i], S[j] = S[j], S[i]  </span><br><span class="line">    <span class="keyword">return</span> S  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; Pseudo-Random Generation Algorithm (PRGA) &quot;&quot;&quot;</span>  </span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>  </span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span>  </span><br><span class="line">        S[i], S[j] = S[j], S[i]  </span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]  </span><br><span class="line">        <span class="keyword">yield</span> K  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key, text</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot; RC4 encryption/decryption &quot;&quot;&quot;</span>  </span><br><span class="line">    S = KSA(key)  </span><br><span class="line">    keystream = PRGA(S)  </span><br><span class="line">    res = []  </span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:  </span><br><span class="line">        res.append(char ^ <span class="built_in">next</span>(keystream))  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(res)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">key = <span class="string">b&#x27;MDY&#x27;</span>  </span><br><span class="line">plaintext = <span class="string">b&#x27;caidenglang&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">ciphertext = RC4(key, plaintext)  </span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
